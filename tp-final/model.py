import re
import joblib
import numpy as np
import pandas as pd
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sqlalchemy import create_engine
from dotenv import load_dotenv
from db import get_db_connection

load_dotenv()

def preprocess_text(text):
    """Nettoie le texte en enlevant les caract√®res sp√©ciaux et en mettant en minuscules."""
    text = text.lower()
    text = re.sub(r'\W+', ' ', text)
    return text.strip()

def train_model():
    """Entra√Æne un mod√®le de r√©gression logistique sur les tweets stock√©s en base de donn√©es."""
    
    db_url = f"mysql+mysqlconnector://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}/{os.getenv('DB_NAME')}"
    engine = create_engine(db_url)

    df = pd.read_sql("SELECT text, positive, negative FROM tweets", engine)

    if df.empty:
        print("‚ö†Ô∏è Aucune donn√©e disponible pour l'entra√Ænement.")
        return
    
    # Nettoyage du texte
    df['processed_text'] = df['text'].apply(preprocess_text)

    # Vectorisation du texte
    vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1,2))
    X = vectorizer.fit_transform(df['processed_text'])
    
    y_positive = df['positive']

    if len(set(y_positive)) < 2:
        print("‚ö†Ô∏è Erreur : Les donn√©es contiennent une seule classe. Ajoutez plus d'exemples.")
        return

    # Split des donn√©es
    X_train, X_test, y_train_positive, y_test_positive = train_test_split(X, y_positive, test_size=0.2, random_state=42)

    # Entra√Ænement des mod√®les
    model_positive = LogisticRegression(max_iter=1000, solver='lbfgs')

    model_positive.fit(X_train, y_train_positive)

    # Pr√©dictions et √©valuation
    y_pred_positive = model_positive.predict(X_test)

    accuracy_positive = accuracy_score(y_test_positive, y_pred_positive)

    # Sauvegarde
    joblib.dump((vectorizer, model_positive), "model.pkl")

    print(f"‚úÖ Mod√®le entra√Æn√© avec succ√®s !\n"
          f"üìä Pr√©cision (positive): {accuracy_positive:.2f}\n")

def predict_sentiment(tweet):
    """Pr√©dit le sentiment d'un tweet donn√© entre -1 (n√©gatif) et 1 (positif)."""
    
    # Charger le mod√®le entra√Æn√©
    try:
        vectorizer, model_positive = joblib.load("model.pkl")
    except FileNotFoundError:
        print("‚ö†Ô∏è Mod√®le non trouv√©. Veuillez entra√Æner le mod√®le d'abord.")
        return None

    # Pr√©traitement du tweet
    tweet = preprocess_text(tweet)
    X = vectorizer.transform([tweet])

    # Pr√©dictions des probabilit√©s
    positive_score = model_positive.predict_proba(X)[0][1]

    # Score de sentiment normalis√© entre -1 et 1
    sentiment_score = 2 * positive_score - 1

    return sentiment_score

if __name__ == "__main__":
    try:
        print("üîÑ Connexion √† MySQL pour l'entra√Ænement du mod√®le...")
        train_model()
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur pendant l'entra√Ænement du mod√®le : {e}")
